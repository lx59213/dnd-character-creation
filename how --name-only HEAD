[33mcommit 06399b0589840fb3ff7525666059ccc062e1feee[m[33m ([m[1;36mHEAD -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: lx59213 <lx59213@gmail.com>
Date:   Fri Jan 10 12:06:36 2025 +0800

    fix: complete ASI state management updates and add documentation

[1mdiff --git a/docs/ability-scores-refactor.md b/docs/ability-scores-refactor.md[m
[1mnew file mode 100644[m
[1mindex 0000000..f38c187[m
[1m--- /dev/null[m
[1m+++ b/docs/ability-scores-refactor.md[m
[36m@@ -0,0 +1,144 @@[m
[32m+[m[32m# 属性值系统重构计划[m
[32m+[m
[32m+[m[32m## 1. 当前问题分析[m
[32m+[m
[32m+[m[32m### 1.1 状态管理分散[m
[32m+[m[32m- 属性值计算逻辑分散在多个组件中[m
[32m+[m[32m- 缺乏统一的状态更新流程[m
[32m+[m[32m- ASI的临时状态和最终状态没有明确区分[m
[32m+[m
[32m+[m[32m### 1.2 更新时机混乱[m
[32m+[m[32m- 种族/亚种更改时直接重置finalAbilityScores[m
[32m+[m[32m- ASI选择立即生效，没有确认机制[m
[32m+[m[32m- 各组件独立触发更新，可能造成冲突[m
[32m+[m
[32m+[m[32m### 1.3 数据流不清晰[m
[32m+[m[32m- 没有明确的数据流向[m
[32m+[m[32m- 状态更新路径不统一[m
[32m+[m[32m- 缺乏中间状态管理[m
[32m+[m
[32m+[m[32m## 2. 重构目标[m
[32m+[m
[32m+[m[32m### 2.1 统一状态管理[m
[32m+[m[32m- 将所有属性值相关的状态集中在Context中[m
[32m+[m[32m- 建立清晰的状态更新流程[m
[32m+[m[32m- 实现属性值的分层管理[m
[32m+[m
[32m+[m[32m### 2.2 明确组件职责[m
[32m+[m[32m- ASISelection：只负责UI和选择逻辑[m
[32m+[m[32m- Context：统一管理所有属性值计算[m
[32m+[m[32m- AbilityScoreAllocation：只处理基础值[m
[32m+[m[32m- LevelSelection：管理等级和ASI触发[m
[32m+[m
[32m+[m[32m### 2.3 改进用户体验[m
[32m+[m[32m- 添加ASI选择的确认步骤[m
[32m+[m[32m- 提供属性值变更的预览[m
[32m+[m[32m- 实现变更的回退机制[m
[32m+[m
[32m+[m[32m## 3. 具体实现计划[m
[32m+[m
[32m+[m[32m### 3.1 类型系统改进[m
[32m+[m[32m```typescript[m
[32m+[m[32m// src/types/character.ts[m
[32m+[m[32minterface Character {[m
[32m+[m[32m  // 基础属性[m
[32m+[m[32m  baseAbilityScores: AbilityScores;[m
[32m+[m[41m  [m
[32m+[m[32m  // 种族相关加值[m
[32m+[m[32m  raceAbilityBonus: Partial<AbilityScores>;[m
[32m+[m[32m  subraceAbilityBonus: Partial<AbilityScores>;[m
[32m+[m[41m  [m
[32m+[m[32m  // ASI相关[m
[32m+[m[32m  asiSystem: ASISystemState;[m
[32m+[m[32m  temporaryASI?: Partial<AbilityScores>; // 新增：未确认的ASI[m
[32m+[m[41m  [m
[32m+[m[32m  // 最终计算结果[m
[32m+[m[32m  finalAbilityScores: AbilityScores;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32minterface ASISystemState {[m
[32m+[m[32m  choices: ASIChoice[];[m
[32m+[m[32m  confirmedChoices: ASIChoice[]; // 新增：已确认的选择[m
[32m+[m[32m  availablePoints: number;[m
[32m+[m[32m}[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### 3.2 Context改进[m
[32m+[m[32m```typescript[m
[32m+[m[32m// src/components/CharacterCreator/context.tsx[m
[32m+[m[32minterface CharacterContextType {[m
[32m+[m[32m  // 现有方法[m
[32m+[m[32m  character: Character;[m
[32m+[m[32m  updateCharacter: (updates: Partial<Character>) => void;[m
[32m+[m[41m  [m
[32m+[m[32m  // 新增方法[m
[32m+[m[32m  updateBaseAbilityScores: (scores: AbilityScores) => void;[m
[32m+[m[32m  updateRaceBonus: (bonus: Partial<AbilityScores>) => void;[m
[32m+[m[32m  updateSubraceBonus: (bonus: Partial<AbilityScores>) => void;[m
[32m+[m[32m  updateTemporaryASI: (asi: Partial<AbilityScores>) => void;[m
[32m+[m[32m  confirmASI: () => void;[m
[32m+[m[32m  calculateFinalScores: () => AbilityScores;[m
[32m+[m[32m}[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### 3.3 组件职责调整[m
[32m+[m
[32m+[m[32m##